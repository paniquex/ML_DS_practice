Разреженные матрицы

Ограничение времени	10 секунд
Ограничение памяти	5Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
 
Реализуйте модуль `sparse_matrix`, задающий класс разреженной матрицы `CooSparseMatrix` с координатным форматом хранения. В памяти должны хранится только ненулевые элементы матрицы!

——————————————————————————————————————————————–

1. Метод `__init__` класса принимает два аргумента:

* ijx_list — список кортежей (i, j, x), i,j - положение элемента в матрице, x - значение элемента.

* shape — кортеж из двух элементов, размер матрицы

Если в списке встречаются одинаковые индексы, необходимо выбросить исключение TypeError

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))

——————————————————————————————————————————————–

2. Необходимо реализовать простую индексацию матриц. При вызове matrix[i] необходимо вернуть объект `CooSparseMatrix`, соответствующий i-ой строки исходной матрице и имеющий размер 1 на количество столбцов в матрице. При вызове matrix[i, j] необходимо вернуть [i, j] элемент матрицы. Также реализуйте возможность присвоить [i,j] элементу матрицы вещественное число.

> matrix1 = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))

> to_array(matrix1[0])

array([[1., 0.]])

> matrix1[0, 0]

1

> matrix1[1, 1] = 2

> matrix1[1, 1]

2

——————————————————————————————————————————————–

Замечание. Также рекомендуется реализовать для себя функцию или метод to_array, преобразующий разреженную матрицу в numpy ndarray. Так как на проверяющем сервере нет библиотеки numpy, при засылке файла с импортом numpy будет происходить ошибка.

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))

> to_array(matrix)

array([[1., 0.], [2., 0.]])

——————————————————————————————————————————————–

Разреженные матрицы научились складываться

Ограничение времени	10 секунд
Ограничение памяти	5Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Добавьте в класс `CooSparseMatrix` возможность сложения и вычитания матриц, а также умножения матриц на число. При сложнение и вычитании матриц разного размера должно выбрасываться исключение `TypeError`.

——————————————————————————————————————————————–

> matrix1 = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 0, 2)], shape=(2, 2))

> matrix2 = CooSparseMatrix(ijx_list=[(0, 1, 2), (1, 0, 1)], shape=(2, 2))

> matrix3 = matrix1 + matrix2

> to_array(matrix3)

array([[1., 2.], [3., 0.]])

> to_array(matrix1 * 5) array([[ 5., 0.], [10., 0.]])


Разреженные матрицы меняют размер
Ограничение времени	10 секунд
Ограничение памяти	5Mb
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Добавьте в класс CooSparseMatrix следующие атрибуты:

1. Атрибут shape, задающий размер массива

Значение атрибута — кортеж из двух целых положительных чисел. При попытке присвоить атрибуту что-либо другое, должно выбрасываться исключение TypeError. При попытке присвоить атрибуту размер, не соответствующий существующему (например, попытаться сменить размер матрицы с (2, 5) на (3, 4)) должно выбрасываться исключение `TypeError`. При корректном присваивании, необходимо изменить размер матрицы согласно C-order.

——————————————————————————————————————————————–

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 1, 2), (2, 3, 5), (1, 3, 0)], shape=(3, 5)

> matrix.shape

(3, 5)

> matrix.shape = (5, 3)

> matrix.to_array()

array([[1., 0., 0.], [0., 0., 0.],

[2., 0., 0.], [0., 0., 0.],

[0., 5., 0.]

)
——————————————————————————————————————————————–

2. Атрибут T, возвращающий транспонированную матрицу. При попытке присвоить что-либо атрибуту должно выбрасываться исключение AttributeError. Обращение к атрибуту не должно влиять на исходную матрицу!

> matrix = CooSparseMatrix(ijx_list=[(0, 0, 1), (1, 1, 2), (2, 3, 5), (1, 3, 0)], shape=(3, 5))

> matrix.T

array([[1., 0., 0.], [0., 2., 0.],

[0., 0., 0.], [0., 0., 5.],

[0., 0., 0.]

)
> matrix.shape

(3, 5)
